// Basic Node.js Express Backend for LivingTech

const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(bodyParser.json());

// MongoDB connection
mongoose.connect("mongodb://localhost:27017/livingtech", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const userSchema = new mongoose.Schema({
  email: String,
  coinBalance: { type: Number, default: 0 },
  handles: [{ platform: String, handle: String }],
  tasks: [{ platform: String, targetHandle: String }],
  lastClaimed: Date,
});

const User = mongoose.model("User", userSchema);

// Routes
app.post("/api/register", async (req, res) => {
  const { email } = req.body;
  let user = await User.findOne({ email });
  if (!user) user = await User.create({ email });
  res.json(user);
});

app.post("/api/claim-reward", async (req, res) => {
  const { email } = req.body;
  const user = await User.findOne({ email });
  const now = new Date();

  if (user && (!user.lastClaimed || new Date(user.lastClaimed).getDate() !== now.getDate())) {
    user.coinBalance += 50;
    user.lastClaimed = now;
    await user.save();
    return res.json({ success: true, coinBalance: user.coinBalance });
  }
  res.json({ success: false, message: "Already claimed today" });
});

app.post("/api/add-handle", async (req, res) => {
  const { email, platform, handle } = req.body;
  const user = await User.findOne({ email });
  if (user) {
    user.handles.push({ platform, handle });
    await user.save();
    res.json(user);
  } else res.status(404).send("User not found");
});

app.post("/api/add-task", async (req, res) => {
  const { email, platform, targetHandle } = req.body;
  const user = await User.findOne({ email });
  if (user && user.coinBalance >= 20) {
    user.coinBalance -= 20;
    user.tasks.push({ platform, targetHandle });
    await user.save();
    res.json(user);
  } else res.status(400).send("Insufficient coins or user not found");
});

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
